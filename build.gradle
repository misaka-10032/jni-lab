/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
  }
}

apply plugin: "com.dorongold.task-tree"

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
}

dependencies {
  // This dependency is found on compile classpath of this component and consumers.
  compile 'com.google.guava:guava:20.0'

  // Use JUnit test framework
  testCompile 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'misaka.lab.jni.App'

def nativeRoot = 'src/main/cpp'
def nativeLib = 'JniHello'
def setNativeLibPath = {
  systemProperty 'java.library.path', buildDir
}

test setNativeLibPath
run setNativeLibPath

task jniHeaders(type:Exec) {
  def classpath = sourceSets.main.output.classesDir
  commandLine "javah", "-d", nativeRoot, "-classpath", classpath, "$mainClassName"
  dependsOn classes
}

task buildNativeCmake(type:Exec) {
  workingDir buildDir
  commandLine 'cmake', '..'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task buildNative(
    type: Exec,
    dependsOn: buildNativeCmake) {
  workingDir buildDir
  commandLine 'make'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

classes.finalizedBy buildNative
